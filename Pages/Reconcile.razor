@using Fluxor.Blazor.Web.Components; 
@using Reconciler.Store
@using Fluxor

@inherits FluxorComponent

@inject IState<TransactionsState> _state
@inject IDispatcher _dispatcher

<table>
    <thead>
        <td></td>
        <td>Date</td>
        <td>Charge</td>
        <td>Class</td>
        <td>Details</td>
        <td>Note</td>
    </thead>
    <tr><td colspan="999"><h1>Unreconsiled</h1></td></tr>
    @foreach (var transaction in _state.Value.Transactions) {
        if(transaction.Charge > 0 || transaction.Group != null) continue;
        <TransactionRow Transaction="@transaction" />
    }
    <tr><td colspan="999"><h2>Reconsiled</h2></td></tr>
    @foreach (var transactionGroup in _state.Value.Transactions.GroupBy(t => t.Group?.Name)) {
        if(transactionGroup.Key == null) continue;
        <tr><td colspan="999"> <h3>@transactionGroup.Key</h3> </td></tr>
        foreach (var transaction in transactionGroup) {
            if(transaction.Charge > 0) continue;
            <TransactionRow Transaction="@transaction" />
        }
        <tr>
            <td>Total:</td>
            <td>@transactionGroup.Sum(tg => tg.Charge)</td>
        </tr>
        <td colspan="999"> </td>
    }
</table>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _dispatcher.Dispatch(new TransactionsLoadAction());
    }
}