@using Reconciler.Domain
@using Reconciler.Application
@using System.Diagnostics
@using Fluxor
@using Reconciler.Store
@using Fluxor.Blazor.Web.Components;

@inject IGroupRepository _groupRepository;
@inject IDispatcher _dispatcher;

@inherits FluxorComponent

<select value="@Transaction.Group?.Name" @onchange=HandleOptionChanged>
    <option>Select</option>
    @foreach (var option in _classificationOptions) {
        <option value="@option.GroupName">@option.GroupName</option>
    }
</select>

@code {

    [Parameter]
    public TransactionViewModel Transaction { get; set; }

    [Parameter]
    public Action<Group> OnClassificationChanged { get; set; }

    private Group[] _classificationOptions;
    
    protected override async Task OnInitializedAsync()
    {
        var options = await _groupRepository.GetGroups();
        _classificationOptions = options.ToArray();
    }

    private void HandleOptionChanged(ChangeEventArgs e)
    {
        var newGroupName = (string)e.Value;
        var group = _classificationOptions.First(g => g.GroupName == newGroupName);

        var transactionHash = Transaction.Hash;
        var groupChangeAction = new TransactionGroupChangeAction(transactionHash, group.ToHash());
        
        _dispatcher.Dispatch(groupChangeAction);
    }

}