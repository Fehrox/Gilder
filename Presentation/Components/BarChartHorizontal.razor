@using Domain

<div style="
    display: flex; 
    flex-direction: column;
     width: 100%; 
     background-color: whitesmoke; 
     border-radius: 0 30px 30px 0;
     margin: 10px 10px 10px 0;
     border: 1px solid lightgrey"
>
    @foreach (var bar in OrderedBarValues) {
        var width = Math.Abs(bar.Value) / MaxBarValue;
        <div
            @onclick="@(() => { bar.OnBarClicked?.Invoke(); })"
            style="
                background-color: @(bar.Value > 0 ? "#CCD888" : "#FF576A");
                width: @(width * 100)%; 
                height: 30px; 
                white-space: nowrap; 
                cursor: pointer;
                padding: 0 10px 10px 0;"
        >
            @bar.Text
        </div>
    }
</div>

@code {

    [Parameter]
    public IEnumerable<Bar> Bars { get; set; } = Array.Empty<Bar>();

    [Parameter]
    public double? MaxBarValue { get; set; } = null;

    protected override void OnParametersSet() 
        => MaxBarValue ??= Bars.Any() ? Bars.Max(bv => bv.Value) : 0;

    private IEnumerable<Bar> OrderedBarValues
        => Bars.OrderByDescending(b => Math.Abs(b.Value));
    
    public class Bar {
        public string Text { get; set; } = String.Empty;
        public double Value { get; set; }
        public Action OnBarClicked { get; set; } = () => { };
    }

}