@using Domain
@using System.Globalization

<div style="display: flex">
    <div style="display: flex">
        <div>@(BudgetInterval.Interval != null ? "Starts" : "Paid")</div>
        <input type="date" @onchange="@HandleFromInputChanged" value="@BudgetInterval.From.ToString("yyyy-MM-dd")"/>
    </div>
    <div style="display: flex">
        <div>Delta</div>
        <input type="number" @onchange="@HandleDeltaChanged" value="@BudgetInterval.Delta.ToString(CultureInfo.InvariantCulture)"/>
    </div>
    <div style="display: flex">
        <div>Recurring</div>
        <input type="checkbox" @bind="@IsRepeatsChecked"/>
        @if (BudgetInterval.Interval != null)
        {
            var nextDate = BudgetInterval.From + BudgetInterval.Interval.Value;
            <input type="date"
                   @onchange="@HandleIntervalChanged"
                   value="@nextDate.ToString("yyyy-MM-dd")"/>
            @: Every @(BudgetInterval.Interval.Value.Days) days,&nbsp
        }
    </div>
    @if (IsRepeatsChecked)
    {
        <div style="display: flex">
            <div>Ends</div>
            <input type="checkbox" @bind="@IsEndsChecked"/>
            @if (BudgetInterval.To != null) {
                <input type="date"
                       min="@BudgetInterval.From.ToString("yyyy-MM-dd")"
                       @onchange="@HandleToInputChanged"
                       value="@BudgetInterval.To.Value.ToString("yyyy-MM-dd")"/>
                var duration = (BudgetInterval.To - BudgetInterval.From);
                const double DAYS_IN_YEAR = 365.242199;
                var yearsLong = duration.Value.Days > DAYS_IN_YEAR;
                @:After @(yearsLong ? Math.Round(duration.Value.Days/DAYS_IN_YEAR,1) : duration.Value.Days) @(yearsLong ? "Years" : "Days"), 
                var intervals = duration.Value / BudgetInterval.Interval;
                @(Math.Round(intervals ?? 0) * BudgetInterval.Delta)
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public BudgetInterval BudgetInterval { get; set; } = new();

    private bool IsRepeatsChecked
    {
        get => BudgetInterval.Interval != null;
        set => BudgetInterval.Interval = value ? new TimeSpan(7, 0, 0, 0) : null;
    }

    private bool IsEndsChecked
    {
        get => BudgetInterval.To != null;
        set => BudgetInterval.To = value ? BudgetInterval.From + BudgetInterval.Interval : null;
    }

    private void HandleFromInputChanged(ChangeEventArgs fromDateInput)
    {
        var fromDateStr = (string) fromDateInput.Value!;
        var fromDate = DateTime.Parse(fromDateStr);

        BudgetInterval.From = fromDate;
        StateHasChanged();
    }


    private void HandleToInputChanged(ChangeEventArgs toDateInput)
    {
        var toDateStr = (string) toDateInput.Value!;
        var toDate = DateTime.Parse(toDateStr);

        BudgetInterval.To = toDate;
        StateHasChanged();
    }

    private void HandleDeltaChanged(ChangeEventArgs obj)
    {
        var updateDeltaStr = (string) obj.Value!;
        var updatedDelta = double.Parse(updateDeltaStr);

        BudgetInterval.Delta = updatedDelta;
        StateHasChanged();
    }

    private void HandleIntervalChanged(ChangeEventArgs intervalDateInput)
    {
        var intervalDateStr = (string) intervalDateInput.Value!;
        var intervalDate = DateTime.Parse(intervalDateStr);
        var intervalSpan = intervalDate - BudgetInterval.From;

        BudgetInterval.Interval = intervalSpan;
        StateHasChanged();
    }

}