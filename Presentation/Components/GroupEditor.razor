@using Application
@using Domain
@using Fluxor
@using Presentation.Store
@using Fluxor.Blazor.Web.Components
@using Presentation.Store.Group

@inherits FluxorComponent

@inject IState<GroupState> _groupState;
@inject IDispatcher _dispatcher;

<ImageTextLink
    Text="Edit Groups"
    Large
    OnClick="@(() => SetGroupEditor(true))"
    Source="icons/group-icon.png"
    Alt="Edit Transaction Groups" />

@if (_showGroupEditor)
{
    <Modal OnClose="@(() => SetGroupEditor(false))">
        <div style="display: flex; flex-direction: column">
            @foreach (var group in _groupState.Value.Groups)
            {
                <div style="border: 10px; display: flex">
                    @group.Name
                    <button @onclick="@(() => HandleRemove(group))">X</button>
                </div>
            }

            <button @onclick="@HandleAddClicked">Add</button> <input type="text" @bind="@NewGroupName"/>
        </div>
    </Modal>
}

@code {

    private bool _showGroupEditor = false;

    private string? NewGroupName { get; set; }

    private async Task HandleAddClicked()
    {
        var group = new Group { Id = Guid.NewGuid(), Name = NewGroupName };
        _dispatcher.Dispatch(new GroupRepoCreateAction(new[] { group }));

        await Task.CompletedTask;
    }

    private void SetGroupEditor(bool show)
    {
        _showGroupEditor = show;
        StateHasChanged();   
    }

}
@code {
    private void HandleRemove(Group group)
    {
        _dispatcher.Dispatch(new GroupRemoveAction(new[] {@group}));
        NewGroupName = string.Empty;
    }
}
