@using Domain
@using Application
@using Presentation.Store 
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using Domain
@using Application
@using Presentation.Store.Group
@using Presentation.Store.Transaction

@inject IDispatcher _dispatcher;
@inject IState<GroupState> _groupState;

@inherits FluxorComponent

@{
    var isKnownGroup = _groupState.Value.Groups
        .Any(g => g.Name == Transaction?.Group?.Name);
    var styleString = $"background-color: {(isKnownGroup ? "lightgrey" : "initial")}";
}
<button @onclick="@HandleShowGroupSelector" style="@styleString" >
    @(Transaction?.Group?.Name ?? "Select")
</button>

@if (_showSelector) {
    <GroupSelector 
        OnGroupSelected="@HandleOptionChanged" 
        CurrentlySelectedGroup="@Transaction?.Group" />
}

@code {

    private bool _showSelector = false;
    
    [Parameter]
    public Transaction? Transaction { get; set; }

    [Parameter]
    public Action<Transaction> OnTransactionGroupChanged { get; set; } = _ => { };

    private void HandleShowGroupSelector() => _showSelector = true;
    private void HandleHideGroupSelector() => _showSelector = false;
    
    private void HandleOptionChanged(Group group)
    {
        _showSelector = false;

        if (Transaction == null) return;
        
        var updatedTransaction = Transaction with { Group = @group };
        _dispatcher.Dispatch(new TransactionUpdateAction(updatedTransaction));
        
        OnTransactionGroupChanged?.Invoke(updatedTransaction);
    }
}