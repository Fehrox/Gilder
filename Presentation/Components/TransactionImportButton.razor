@using Application
@using Domain
@using Fluxor
@using Presentation.Store.Transaction

@inject ITransactionCsvImporter _transactionCsvImporter
@inject IDispatcher _dispatcher

@{
    var selectedColumns = Columns.GroupBy(c => c);
    // Mandatory
    var hasDate = selectedColumns.Any(g => g.Key == nameof(Transaction.Date));
    var hasCharge = selectedColumns.Any(g => g.Key == nameof(Transaction.Charge));
    var hasClass = selectedColumns.Any(g => g.Key == nameof(Transaction.Class));
    var hasDetails = selectedColumns.Any(g => g.Key == nameof(Transaction.Details));
    // Optional
    var hasGroup = selectedColumns.Any(g => g.Key == nameof(Transaction.Group));
    var hasBalance =  selectedColumns.Any(g => g.Key == nameof(Transaction.Balance));
    var hasMerchant =  selectedColumns.Any(g => g.Key == nameof(Transaction.Merchant));
}

<div>First row is heading <input type="checkbox" @bind="@_firstRowIsHeading"/></div>
@* Mandatory *@
<div style="background-color: @(hasDate ? "green" : "red")">@nameof(Transaction.Date)</div>
<div style="background-color: @(hasCharge ? "green" : "red")">@nameof(Transaction.Charge)</div>
<div style="background-color: @(hasClass ? "green" : "red")">@nameof(Transaction.Class)</div>
<div style="background-color: @(hasDetails ? "green" : "red")">@nameof(Transaction.Details)</div>
@* Optional *@
<div style="background-color: @(hasBalance ? "green" : "orange")">@nameof(Transaction.Balance)</div>
<div style="background-color: @(hasGroup ? "green" : "orange")">@nameof(Transaction.Group)</div>
<div style="background-color: @(hasMerchant ? "green" : "orange")">@nameof(Transaction.Merchant)</div>
@{ var canImport = hasDate && hasCharge && hasClass && hasDetails; }
<button disabled="@(!canImport)" @onclick="@HandleImportClickedAsync">Import</button>

@code {

    private bool _firstRowIsHeading = false;
    
    [Parameter]
    public string[] Columns { get; set; } = Array.Empty<string>();

    [Parameter]
    public string CsvText { get; set; } = String.Empty;

    [Parameter]
    public Action OnImported { get; set; } = () => { };

    private async Task HandleImportClickedAsync()
    {
        var csvHeaderStr = String.Join(",", Columns) + "\n";
        var transactions = await _transactionCsvImporter
            .ImportTransactions(CsvText, csvHeaderStr, _firstRowIsHeading);
        _dispatcher.Dispatch(new TransactionCsvLoadAction(transactions));
    }

}