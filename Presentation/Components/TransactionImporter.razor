@using Fluxor
@using Presentation.Store.Transaction
@using Application
@using Domain

@inject IDispatcher _dispatcher

<ImageTextLink
    Text="Import New Transactions"
    Large
    Source="/icons/import-icon.png" 
    OnClick="@(() => SetShow(true))"
    Alt="Import Bank Transaction CSV" />

@if (_show) {
    <Modal OnClose="@HandleClear">
        @if (!_csvData.Any()) {
            <div style="display:flex; justify-content: center; align-items: center; height: 100%">
                <TextFileImporter
                    OnTextLoadedFromFile="@HandleTextFileLoaded"/>    
            </div>
        } else {
            <div>Found @_csvData.Length rows.</div>
            <div style="max-height: 90%; overflow-y: scroll">
                <table style="position: relative; border-collapse: collapse; ">
                    <thead>
                    @{ var headerRows = _csvData.Any() ? _csvData.First() : Array.Empty<string>(); }
                    @for (int i = 0; i < headerRows.Length; i++) {
                        int index = i;
                        <th style="position: sticky; top: 0; background-color: white">
                            @headerRows[index]
                            <select @onchange="@(v => HandleColumnChanged(index, (string)v.Value!))">
                                <option>Ignore</option>
                                <option>@nameof(Transaction.Date)</option>
                                <option>@nameof(Transaction.Charge)</option>
                                <option>@nameof(Transaction.Class)</option>
                                <option>@nameof(Transaction.Details)</option>
                                <option>@nameof(Transaction.Balance)</option>
                                <option>@nameof(Transaction.Group)</option>
                                <option>@nameof(Transaction.Merchant)</option>
                            </select>
                        </th>
                    }
                    </thead>

                    <tbody>
                    @foreach (var row in _csvData.Skip(1)) {
                        <tr>
                            @foreach (var cell in row) {
                                <td style="border: 1px solid;">@cell</td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div style="display: flex; justify-content: flex-end">
                <ErrorBoundary @ref="@_importError">
                    <ChildContent>
                        <TransactionImportButton
                            Columns="@_columns"
                            CsvText="@_csvText"
                            OnImported="@(() => SetShow(false))"/>
                    </ChildContent>
                    <ErrorContent>
                        @context.Message
                        <button @onclick="@(() => _importError?.Recover())">Ok</button>
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        }
    </Modal>
}

@code {
    private ErrorBoundary? _importError = null;
    private bool _show = false;
    private string[][] _csvData = Array.Empty<string[]>();
    private string[] _columns = Array.Empty<string>();
    private string _csvText = String.Empty;

    private void SetShow(bool show)
    {
        _show = show;
        StateHasChanged();
    }

    private void HandleTextFileLoaded(string csvText)
    {
        var csvRows = csvText.Split("\n");
        var csvCells = csvRows.Select(r => r.Split(",")).ToArray();
        var csvCols = csvCells.First();

        _columns = new string[csvCols.Length];
        _csvData = csvCells;
        _csvText = csvText;

        StateHasChanged();
    }

    private void HandleColumnChanged(int columnIndex, string value)
    {
        _columns[columnIndex] = value;
        StateHasChanged();
    }

    private void HandleClear()
    {
        _csvText = String.Empty;
        _csvData = Array.Empty<string[]>();
        SetShow(false);
    }
}