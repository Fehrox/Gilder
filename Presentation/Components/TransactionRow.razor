@using Fluxor
@using Presentation.Store
@using Fluxor.Blazor.Web.Components
@using Domain
@using System.Text.RegularExpressions
@using System.Net
@using Presentation.Store.Transaction
@using Group = Domain.Group

@inherits FluxorComponent

@inject IDispatcher _dispatcher

<tr style="background-color: @(_highlighted ? "yellow" : "initial")">
    <td style="font-size: small;">
        <SimilarTransactionFinder Transaction="@Transaction" OnClick="@Highlight"/>
        <ImageLink NewTab Source="icons/location-icon.png" Href=@EncodeLocationLink() OnClick="@Highlight"/>
        <ImageLink NewTab Source="icons/calendar-icon.png" Href=@EncodeCalendarLink() OnClick="@Highlight"/>
        @GetPaidDate().ToShortDateString()
    </td>
    <td>@Transaction.Charge.ToCurrencyString()</td>
    @* <td>@Transaction.Class</td> *@
    <td style="font-size: x-small;">
        <ImageLink NewTab Source="icons/map-icon.png" Href=@EncodeMapLink() OnClick="@Highlight"/>
        @Transaction.Details
    </td>
    <td><TransactionNoteInput Transaction=@Transaction/></td>
    <td>
        @* <GroupSelectButton  *@
        @*     Text="@(Transaction?.Group?.Name ?? "Select")"  *@
        @*     CurrentGroup=@Transaction.Group  *@
        @*     OnTransactionGroupChanged=@HandleGroupChanged /> *@
        <TransactionGroupSelect Transaction=@Transaction OnTransactionGroupChanged=@(t => HandleGroupChanged(t.Group))/>
    </td>
    <td><input type="checkbox" checked="@IsSelected" onclick="@(() => OnSelected(Transaction))"/></td>
</tr>

@code {

    private bool _highlighted = false;

    [Parameter]
    public Transaction Transaction { get; set; } = new();

    [Parameter]
    public bool IsSelected { get; set; } = false;
    
    [Parameter]
    public Action<Transaction> OnGroupChanged { get; set; } = _ => { };

    [Parameter]
    public Action<Transaction> OnSelected { get; set; } = _ => { };
    
    private DateTime GetPaidDate()
    {
        var dateRegex = new Regex("(\\d\\d/\\d\\d)");
        var details = Transaction.Details;
        var match = dateRegex.Match(details);
        if (match.Success) {
            var dateStr = match.Value;
            var dateStrParts = dateStr.Split("/");
            var dayStr = dateStrParts.First();
            var monthStr = dateStrParts.Last();
            var dayInt = int.Parse(dayStr);
            var monthInt = int.Parse(monthStr);
            var yearInt = Transaction.Date.Year;
            var paidDate = new DateTime(yearInt, monthInt, dayInt);
            
            return paidDate;
        }

        return Transaction.Date;
    }

    private string EncodeLocationLink()
    {
        var locationLink = $"https://timeline.google.com/maps/timeline?pli=1&pb=!1m2!1m1!1s{GetPaidDate():yyyy-M-d}";
        return locationLink;
    }

    private string EncodeCalendarLink()
    {
        // var transactinWindow = GetPaidDate() - TimeSpan.FromDays(5);
        // var weekCalendarLink = $"https://calendar.google.com/calendar/u/0/r/custom/7/d/{transactinWindow:yyyy/M/d}";
        var focusDate = GetPaidDate() - TimeSpan.FromDays(1);
        var calendarLink = $"https://calendar.google.com/calendar/u/0/r/customday/{focusDate:yyyy/M/d}";
        // var oneDayCalendarLink = $"https://calendar.google.com/calendar/u/0/r/day/{GetPaidDate():yyyy/M/d}";

        return calendarLink;
    }

    private string EncodeMapLink()
    {
        var transactionDetails = Transaction.Details; 
        
        var visaRegex = new Regex("V\\d\\d\\d\\d");
        if (visaRegex.IsMatch(transactionDetails))
            transactionDetails = visaRegex.Replace(transactionDetails, "");

        var dateRegex = new Regex("\\d\\d/\\d\\d");
        if (dateRegex.IsMatch(transactionDetails))
            transactionDetails = dateRegex.Replace(transactionDetails, "");

        var transactionIdRegex = new Regex("\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d");
        if (transactionIdRegex.IsMatch(transactionDetails))
            transactionDetails = transactionIdRegex.Replace(transactionDetails, "");

        transactionDetails = WebUtility.UrlEncode(transactionDetails);
        
        var mapLink = $"https://www.google.com.au/maps/search/{transactionDetails}?hl=en&source=opensearch";

        return mapLink;
    }

    private void Highlight()
    {
        _highlighted = true;
        StateHasChanged();
    }

    private void HandleGroupChanged(Group group)
    {
        var updatedTransaction = Transaction with { Group = group };
        _dispatcher.Dispatch(new TransactionUpdateAction(updatedTransaction));
        
        OnGroupChanged?.Invoke(Transaction);
        _highlighted = false;
        StateHasChanged();
    }

}