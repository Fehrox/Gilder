@using Domain
@using Fluxor
@using Presentation.Store.Modals
@using Presentation.Store.Transaction

@inject IDispatcher _dispatcher

<h3>@Heading</h3>
<table>
    <thead>
    <td>Date</td>
    <td>Charge</td>
    @* <td>Class</td> *@
    <td>Details</td>
    <td>Note</td>
    <td>Group</td>
    <td><input type="checkbox" @onclick="@HandleCheckAllClicked"/></td>
    </thead>
    @foreach (var transaction in Transactions) {
        <TransactionRow 
            IsSelected=@_selectedTransactions.Any(r => r.Id == transaction.Id)
            Transaction=@transaction 
            OnGroupChanged=@OnGroupChanged
            OnSelected=@OnSelected />
    }
    <tr>
        <td>Total:</td>
        @{
            var sumTransactions = SumTransactionGroup(Transactions);
            var periodMonths = GetTransactionPeriod(Transactions);
        }
        <td>$@Math.Round(sumTransactions).ToCurrencyString()</td>
        <td>$@Math.Round(sumTransactions / periodMonths, 2).ToCurrencyString()/Day</td>
    </tr>
</table>

@if (_selectedTransactions.Any())
{
    <div style="position: fixed; right: 20px; bottom: 20px">
        <ContentCard>
            Update group: 
            <button @onclick=@UpdateSelectedTransactions>
                @_selectedTransactions.Count selected
            </button>
        </ContentCard>
    </div>
}

@code {

    [Parameter]
    public string Heading { get; set; } = String.Empty;

    [Parameter]
    public IEnumerable<Transaction> Transactions { get; set; } = new List<Transaction>();

    [Parameter]
    public Action<Transaction> OnGroupChanged { get; set; } = _ => { };

    private List<Transaction> _selectedTransactions = new();

    private void OnSelected(Transaction transaction)
    {
        _selectedTransactions.Add(transaction);
        StateHasChanged();
    }

    private double SumTransactionGroup(IEnumerable<Transaction> transactions) => 
        transactions.Sum(tg => tg.Charge);

    private double GetTransactionPeriod(IEnumerable<Transaction> transactions)
    {
        var orderedTransaction = transactions
            .OrderBy(t => t.Date)
            .ToArray();
        var firstTransaction = orderedTransaction.First();
        var lastTransaction = orderedTransaction.Last();
        var period = lastTransaction.Date - firstTransaction.Date;

        return period.TotalDays;
    }

    private void HandleCheckAllClicked()
    {
        if (_selectedTransactions.Any()) {
            _selectedTransactions.Clear();
        } else {
            _selectedTransactions.AddRange(Transactions);
        }
    }

    private void UpdateSelectedTransactions()
    {
        _dispatcher.Dispatch(new ModalAction(typeof(GroupSelectorModal)).WithParams(
            ("OnSubmit", new Action<Group>(g => {
                foreach (var transaction in _selectedTransactions) {
                    transaction.Group = g;
                    _dispatcher.Dispatch(new TransactionUpdateAction(transaction));
                }
                                                    
                _selectedTransactions.Clear();
            }))    
        ));
        
    }

}