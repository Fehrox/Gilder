@page "/forecast"
@using Fluxor
@using Presentation.Store.Forecast
@using Presentation.Components
@using Fluxor.Blazor.Web.Components
@using Domain

@inherits FluxorComponent

@inject IDispatcher _dispatcher
@inject IState<ForecastState> _forecastState

<div style="display: flex; flex-direction: column">
    <ContentPanel>
        <ForecastTimeline />
        <div style="height: 38vh; max-width: 935px; overflow-x: scroll; overflow-y: hidden">
            <BarChartVertical Bars="@ForecastBars"/>
        </div>
    </ContentPanel>
    <div style="display: flex; flex-direction: row">
        <div style="flex-grow: 5">
            <ContentPanel>
                <BudgetTable/>
            </ContentPanel>
        </div>
        <div style="flex-grow: 1; display: flex; flex-direction: column; justify-content: center">
            <ContentPanel>
                <div style="text-decoration: underline">Forecast Totals</div>

                @{
                    var budgetBars = GetBudgetBars().ToList();
                    var maxBudgetBar = budgetBars.Any() ? budgetBars.Max(b => Math.Abs(b.Value)) : 0;
                }
                <BarChartHorizontal Bars="@budgetBars" MaxBarValue="@maxBudgetBar"/>

                @{
                    var spent = _forecastState.Value.Transactions
                        .Where(t => t.Charge < 0)
                        .Sum(t => t.Charge);
                    var income = _forecastState.Value.Transactions
                        .Where(t => t.Charge > 0)
                        .Sum(t => t.Charge);
                    var net = income + spent;
                }
                <TransactionSummary Spent="@spent" Income="@income" Net="@net"/>
            </ContentPanel>
        </div>
    </div>
</div>
@code {

    private IEnumerable<BarChartVertical.Bar> ForecastBars => GetMonthForecast()
        .Select(f => new BarChartVertical.Bar {
            Text = f.Month.ToString("MMM-yy"),
            Value = f.NetPosition,
            RenderValue = BarChartVertical.RenderValue.Thousands,
            OnBarClicked = () => { }
        });

    private IEnumerable<MonthForecast> GetMonthForecast()
    {
        var transactions = _forecastState.Value.Transactions;
        var forecast = new List<MonthForecast>();
        var transactionsByMonth = transactions
            .GroupBy(t => new DateTime(t.Date.Year, t.Date.Month, 1))
            .OrderBy(t => t.Key);
        double lastMonthNet = 0;
        foreach (var monthTransactions in transactionsByMonth) {
            var thisMonthNet = monthTransactions.Sum(t => t.Charge);
            forecast.Add( new MonthForecast {
                Month = monthTransactions.Key,
                NetPosition = lastMonthNet += thisMonthNet
            });
        }

        return forecast.AsEnumerable();
    }

    private IEnumerable<BarChartHorizontal.Bar> GetBudgetBars()
    {
        var transactions = _forecastState.Value.Transactions;
        var transactionsByGroup = transactions
            .GroupBy(t => t.Group?.Name??"Unresolved");
        var transactionGroupBars = transactionsByGroup
            .Select(t => {
                 var totalGroupCharges = t.Sum(t => t.Charge);
                 var totalGroupChargesRounded = Math.Round(totalGroupCharges);
                 return new BarChartHorizontal.Bar {
                     Value = totalGroupCharges,
                     Text = t.Key + " (" + totalGroupChargesRounded.ToCurrencyString() + ")"
                 };
            });
        
        return transactionGroupBars;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _dispatcher.Dispatch(new ForecastCollateCommand());
    }
    
    public record MonthForecast
    {
        public DateTime Month { get; set; }
        public double NetPosition { get; set; }
    }
}