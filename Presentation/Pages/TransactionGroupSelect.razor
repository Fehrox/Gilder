@using Domain
@using Application
@using Presentation.Store 
@using Fluxor
@using Fluxor.Blazor.Web.Components;
@using Domain
@using Application

@inject IDispatcher _dispatcher;
@inject IState<GroupState> _groupState;

@inherits FluxorComponent

<select value="@Transaction?.Group?.Name" @onchange=HandleOptionChanged>
    <option>Select</option>
    @foreach (var option in _groupState.Value.Groups) {
        <option value="@option.Name">@option.Name</option>
    }
</select>

@code {

    [Parameter]
    public Transaction? Transaction { get; set; }

    [Parameter]
    public Action<Transaction> OnGroupChanged { get; set; } = _ => { };
    
    private void HandleOptionChanged(ChangeEventArgs e)
    {
        var newGroupName = (string)e.Value;
        var group = _groupState.Value.Groups.FirstOrDefault(g => g.Name == newGroupName);

        var updatedTransaction = Transaction with { Group = group };
        _dispatcher.Dispatch(new TransactionUpdateAction(updatedTransaction));
        
        OnGroupChanged?.Invoke(updatedTransaction);
    }

}